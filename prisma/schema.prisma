generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum DbAction {
  CREATE
  UPDATE
  DELETE
}

enum Sex {
  MALE
  FEMALE
}

//TODO: if nesesary add a role who can control some employee data
enum Role {
  ADMIN
  ACCOUNTANT
  EMPLOYEE
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  salt      String
  role      Role      @default(EMPLOYEE)
  employee  Employee?
  cards     Card[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

//TODO: for future use for NFC cards
model Card {
  id        Int      @id @default(autoincrement())
  cardId    String   @unique
  cardMac   String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int //todo log user
  tableName String
  recordId  Int
  action    DbAction
  newState  Json?
  timestamp DateTime @default(now())
}

model Employee {
  id           Int      @id @default(autoincrement())
  phone        String
  fullName     String
  motherName   String
  birthName    String?
  birthDate    DateTime
  placeOfBirth String
  nationality  String   @default("Hungarian")
  sex          Sex
  taxId        String
  TAJ          String
  Address      String
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Position {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  // parentPosition Position? @relation("PositionHierarchy", fields: [parentPositionId], references: [id])
  // parentPositionId Int?
  // childPositions Position[] @relation("PositionHierarchy")
}
