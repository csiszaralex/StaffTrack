generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum DbAction {
  CREATE
  UPDATE
  DELETE
}

enum Sex {
  MALE
  FEMALE
}

enum PermissionType {
  manage @map("MANAGE")
  create @map("CREATE")
  read   @map("READ")
  update @map("UPDATE")
  delete @map("DELETE")
}

model User {
  id          Int              @id @default(autoincrement())
  name        String
  email       String           @unique
  password    String
  salt        String
  isAdmin     Boolean          @default(false)
  permissions UserPermission[]
  employee    Employee?
  cards       Card[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([email])
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       UserPermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model UserPermission {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  permission   Permission     @relation(fields: [permissionId], references: [id])
  permissionId Int
  type         PermissionType
  createdAt    DateTime       @default(now())
}

model Card {
  //TODO: for future use for NFC cards
  id        Int      @id @default(autoincrement())
  cardId    String   @unique
  cardMac   String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int //TODO log user
  tableName String
  recordId  Int
  action    DbAction
  newState  Json?
  timestamp DateTime @default(now())
}

model Employee {
  id           Int      @id @default(autoincrement())
  phone        String
  fullName     String
  motherName   String
  birthName    String?
  birthDate    DateTime
  placeOfBirth String
  nationality  String   @default("Hungarian")
  sex          Sex
  taxId        String
  TAJ          String
  Address      String
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Position {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  // parentPosition Position? @relation("PositionHierarchy", fields: [parentPositionId], references: [id])
  // parentPositionId Int?
  // childPositions Position[] @relation("PositionHierarchy")
  // createdAt   DateTime @default(now())
  // updatedAt   DateTime @updatedAt
}
